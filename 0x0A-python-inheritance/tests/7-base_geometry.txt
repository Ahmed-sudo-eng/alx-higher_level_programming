The ``7-base_geometry`` module
========================

Using ``integer_validator``
----------------------

First import BaseGeometry class from base_geometry module:
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("l", 90)
	>>> bg.integer_validator("w", 80)
	>>> bg.integer_validator("x", "t")
	Traceback (most recent call last):
	...
	TypeError: x must be an integer
	>>> bg.integer_validator("x", 0)
	Traceback (most recent call last):
	...
	ValueError: x must be greater than 0
	>>> bg.integer_validator("x", -4)
	Traceback (most recent call last):
	...
	ValueError: x must be greater than 0
	>>> bg.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented
	>>> bg.integer_validator()
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
	>>> bg.integer_validator("age")
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 1 required positional argument: 'value'
	>>> bg.integer_validator("age", (4,))
	Traceback (most recent call last):
	...
	TypeError: age must be an integer
	>>> bg.integer_validator('age', [3])
	Traceback (most recent call last):
	...
	TypeError: age must be an integer
	>>> bg.integer_validator('age', True)
	Traceback (most recent call last):
	...
	TypeError: age must be an integer
	>>> bg.integer_validator("age", [3, 4])
	Traceback (most recent call last):
	...
	TypeError: age must be an integer
	>>> bg.integer_validator("age", None)
	Traceback (most recent call last):
	...
	TypeError: age must be an integer
